use proc_macro::TokenStream;
use proc_macro2::Span;
use quote::{format_ident, quote, ToTokens};

use syn::parse::{Parse, ParseBuffer, ParseStream};
use syn::{parse_macro_input, Ident, Lit, Token, Expr, File, Item, ExprCall};

use uuid::Uuid;

use rml_core::{AbstractValue, ItemTypeEnum, Property, RmlEngine};

use std::process::{Command, Stdio};

fn format_code(code: &str) -> String {
    let mut rustfmt = Command::new("rustfmt")
        .stdin(Stdio::piped())
        .stdout(Stdio::piped())
        .spawn()
        .expect("Failed to run rustfmt");

    {
        use std::io::Write;
        let stdin = rustfmt.stdin.as_mut().expect("Failed to open stdin");
        stdin.write_all(code.as_bytes()).expect("Failed to write code");
    }

    let output = rustfmt.wait_with_output().expect("Failed to read output");
    String::from_utf8_lossy(&output.stdout).into_owned()
}


fn inject_engine_text_based(
    input: &str,
    engine_str: &str,
    definition: bool,
    mutable: bool,
    functions: &Vec<String>,
) -> String {
    let engine_str = if definition {
        format!("&mut {engine_str}")
    }
    else {
        if mutable {
            format!("&mut {engine_str}")
        } else {
            format!("{engine_str}")
        }
    };

    let mut output = String::new();// = input.to_string();

    for line in input.lines() {
        let mut modified_line = line.to_string();
        for func in functions {
            let pattern = format!("fn {func}(");
            //println!("Pattern: {} {}", pattern, modified_line);

            if line.contains(&pattern) {
                // maybe rebase the function insertion here ?
                // it's made at the function generation right now
            }
            else {
                let pattern = format!("{func}(");
                let replacement = format!("{func}({engine_str}");
                modified_line = modified_line.replace(&pattern, &replacement);
            }
        }

        output.push_str(&modified_line);
        output.push('\n');
    }

    output
}

#[proc_macro]
pub fn rml(input: TokenStream) -> TokenStream {
    let parsed = parse_macro_input!(input as RmlNode);
    let generated = parsed.generate();
    //let generated_id = generated.0;
    let generated_node = generated.1;
    let generated_functions = generated.2;
    let generated_initializer = generated.3;

    // insert engine parameter in functions and callbacks
    // extract function names
    let mut functions_name: Vec<String> = parsed
        .functions
        .iter()
        .map(|f| f.sig.ident.to_string())
        .collect();

    // TODO : add get_number! get_string! macros to the list of functions
    //println!("Functions name in macro: {:?}", functions_name);

    // inject engine in initializer
    let generated_initializer = generated_initializer.to_string();
    let generated_initializer = inject_engine_text_based(&generated_initializer, "engine", false, true, &functions_name);
    let generated_initializer = generated_initializer.parse::<proc_macro2::TokenStream>().unwrap();

    // inject engine in functions
    let generated_functions = generated_functions.to_string();
    let generated_functions = format_code(&generated_functions);
    let generated_functions = inject_engine_text_based(&generated_functions, "engine", true, true, &functions_name);
    let generated_functions = generated_functions.parse::<proc_macro2::TokenStream>().unwrap();

    // inject engine in node
    let generated_node = generated_node.to_string();
    let generated_node = inject_engine_text_based(&generated_node, "engine", false, false, &functions_name);
    let generated_node = generated_node.parse::<proc_macro2::TokenStream>().unwrap();

    let result = quote! {
        {
            // rml engine generated by rml macro
            let mut engine = RmlEngine::new();
            #generated_node; // tree added here
            #generated_functions // functions are added after the tree is built

            // initializer functions are added here
            #generated_initializer

            engine
        }
    };
    TokenStream::from(result)
}

enum Value {
    Lit(Lit),
    Ident(Ident),
    Block(syn::Block),
}

fn lit_to_string(literal: &Lit) -> Option<String> {
    match literal {
        Lit::Str(lit_str) => Some(lit_str.value()), // Extract the value from a LitStr
        Lit::ByteStr(lit_byte_str) => {
            Some(String::from_utf8_lossy(&lit_byte_str.value()).to_string())
        }
        Lit::Char(lit_char) => Some(lit_char.value().to_string()),
        Lit::Int(lit_int) => Some(lit_int.base10_digits().to_string()), // Convert integer to its string representation
        Lit::Float(lit_float) => Some(lit_float.base10_digits().to_string()), // Convert float to its string representation
        Lit::Bool(lit_bool) => Some(lit_bool.value.to_string()), // Convert boolean to "true" or "false"
        Lit::Byte(lit_byte) => Some(format!("{:?}", lit_byte.value())), // Convert byte to a string
        // Add additional cases if needed for other literal types.
        _ => None, // If it's an unsupported literal type
    }
}

// fn value_to_property(value: &Value) -> Property {
//     match value {
//         Value::Lit(literal) => match literal {
//             Lit::Str(lit_str) => Property::new(AbstractValue::String(lit_str.value())),
//             Lit::ByteStr(lit_byte_str) => {
//                 Property::new(AbstractValue::String(String::from_utf8_lossy(&lit_byte_str.value()).to_string()))
//             }
//             Lit::Char(lit_char) => Property::new(AbstractValue::String(lit_char.value().to_string())),
//             Lit::Int(lit_int) => {
//                 let number: f32 = lit_int.base10_parse().unwrap_or_default();
//                 Property::new(AbstractValue::Number(number))
//             }
//             Lit::Float(lit_float) => {
//                 let number: f32 = lit_float.base10_parse().unwrap_or_default();
//                 Property::new(AbstractValue::Number(number))
//             }
//             Lit::Bool(lit_bool) => Property::new(AbstractValue::Bool(lit_bool.value)),
//             Lit::Byte(lit_byte) => Property::new(AbstractValue::Number(lit_byte.value() as f32)),
//             _ => Property::new(AbstractValue::Null), // Handle unexpected or unsupported literal types
//         },
//         Value::Ident(ident) => Property::new(AbstractValue::String(ident.to_string())),
//     }
// }

fn value_to_abstract_value(value: &Value) -> AbstractValue {
    match value {
        Value::Lit(literal) => match literal {
            Lit::Str(lit_str) => AbstractValue::String(lit_str.value()),
            Lit::ByteStr(lit_byte_str) => {
                AbstractValue::String(String::from_utf8_lossy(&lit_byte_str.value()).to_string())
            }
            Lit::Char(lit_char) => AbstractValue::String(lit_char.value().to_string()),
            Lit::Int(lit_int) => {
                let number: f32 = lit_int.base10_parse().unwrap_or_default();
                AbstractValue::Number(number)
            }
            Lit::Float(lit_float) => {
                let number: f32 = lit_float.base10_parse().unwrap_or_default();
                AbstractValue::Number(number)
            }
            Lit::Bool(lit_bool) => AbstractValue::Bool(lit_bool.value),
            Lit::Byte(lit_byte) => AbstractValue::Number(lit_byte.value() as f32),
            _ => AbstractValue::Null, // Handle unexpected or unsupported literal types
        },
        Value::Ident(ident) => AbstractValue::String(ident.to_string()),
        Value::Block(_block) => {
            // Handle block values if needed
            AbstractValue::Null // Placeholder for block handling
        }
    }
}

impl ToString for Value {
    fn to_string(&self) -> String {
        match self {
            Value::Lit(literal) => lit_to_string(literal).unwrap_or_default(),
            Value::Ident(ident) => ident.to_string(),
            Value::Block(_) => "<block>".to_string(),
        }
    }
}

fn inject_engine_in_block(mut block: syn::Block, initializer: bool) -> syn::Block {
    use syn::{Expr, ExprCall, ExprPath, Stmt, Token};

    block.stmts = block
        .stmts
        .into_iter()
        .map(|stmt| match stmt {
            Stmt::Expr(expr, semi_opt) => {
                let expr = match expr {
                    Expr::Call(mut call) => {
                        // Si ce n’est pas déjà "engine" en premier argument
                        let has_engine = call.args.iter().any(|arg| {
                            matches!(arg, Expr::Path(p) if p.path.is_ident("engine"))
                        });

                        //println!("Has engine: {:?}", has_engine);

                        if !has_engine {
                            if initializer {
                                let engine_expr: Expr = syn::parse_quote!(&mut engine);
                                call.args.insert(0, engine_expr);
                            }
                            else {
                                let engine_expr: Expr = syn::parse_quote!(engine);
                                call.args.insert(0, engine_expr);
                            }
                        }

                        Expr::Call(call)
                    }
                    other => other,
                };
                Stmt::Expr(expr, semi_opt)
            }
            other => other,
        })
        .collect();

    block
}

/// Struct to parse a Node
struct RmlNode {
    _ident: Ident, // unused directly, but allow to parse the node name and syntax
    properties: Vec<(Ident, Value)>,
    children: Vec<RmlNode>,
    functions: Vec<syn::ItemFn>,
}

impl Parse for RmlNode {
    /// Parse a `RmlNode` from a proc-macro input stream.
    ///
    /// We expect a sequence of tokens that looks like this:
    ///
    /// Node {
    ///     id: root
    ///     width: 200
    ///     height: 200

    ///     Rectangle {
    ///         x: 50
    ///         width: 100
    ///         height: 100
    ///         color: "green"
    ///     }
    /// }
    ///
    /// The parser will return an error if it encounters any other token.
    fn parse(input: ParseStream) -> syn::Result<Self> {
        // get the name of the node (Node ou Rectangle)
        let _ident: Ident = input.parse()?;

        // manage braces
        let content;
        syn::braced!(content in input);

        let mut properties = Vec::new();
        let mut children = Vec::new();
        let mut functions = Vec::new();

        // println!("Parsing node: {}", _ident);

        while !content.is_empty() {
            // check if we have a function
            if content.peek(Token![fn]) {
                let item: syn::Item = content.parse()?;
                if let syn::Item::Fn(func) = item {
                    //println!("Found function: {}", func.sig.ident);
                    // print the string representation of the function
                    // println!("{}", quote! { #func });
                    functions.push(func);
                } else {
                    return Err(content.error("Expected function"));
                }
            }
            else if content.peek(Ident) && content.peek2(Token![:]) {
                // read a property
                let key: Ident = content.parse()?;
                content.parse::<Token![:]>()?;
                let value = property_parse(&content)?;

                content.parse::<Token![,]>().ok(); // optional comma
                properties.push((key, value));
            }
            else if content.peek(syn::Ident) && content.peek2(Token![.]) {
                //  try to parse property with one dot in it name
                let left: syn::Expr = content.parse()?;
                if content.peek(Token![:]) {
                    content.parse::<Token![:]>()?;
                    println!("Found property with dot: {}", left.to_token_stream());
                    let value = property_parse(&content)?;

                    content.parse::<Token![,]>().ok(); // optional comma
                    let prop_str = left.to_token_stream().to_string().replace(".", "_");
                    let left = format_ident!("{}", prop_str);
                    properties.push((left, value));
                    
                    //continue;
                }
            }
            else if content.peek(Ident) {
                // we have a child
                let child: RmlNode = content.parse()?;
                functions.append(&mut child.functions.clone());
                children.push(child);
            }
            else {
                return Err(content.error("Unexpected token"));
            }
        }

        Ok(Self {
            _ident,
            properties,
            children,
            functions,
        })
    }
}

fn property_parse(content: &ParseBuffer) -> Result<Value, syn::Error> {
    let value: Value;
    if content.peek(Lit) {
        println!("Found literal");
        value = Value::Lit(content.parse()?);
    } else if content.peek(Ident) {
        println!("Found identifier");
        println!("content peek ident: {:?} {:?}", content.peek(Ident), content.peek2(Token![|]));
        //value = Value::Ident(content.parse()?);

        if content.peek(Ident) && content.peek2(Token![|]) {
            // we have a composed value, parse as string
            let mut composed_value = String::new();
            while !content.peek(Token![|]) {
                let ident: Ident = content.parse()?;
                composed_value.push_str(&ident.to_string());
                composed_value.push_str("__");

                if content.peek(Token![|]) {
                    content.parse::<Token![|]>()?;
                } // if line return, break
                if content.peek(Token![;]) || content.peek(Token![,]) {
                    break;
                }
                if content.peek(Ident) && content.peek2(Token![:]) {
                    break;
                }
                if content.peek(Ident) && content.peek2(Token![.]) {
                    break;
                }
            }
            println!("composed value: {}", composed_value);
            value = Value::Ident(Ident::new(&composed_value, Span::call_site()));

            
        } else {
            value = Value::Ident(content.parse()?);
        }

    } else if content.peek(syn::token::Brace) {
        let block: syn::Block = content.parse()?;
        value = Value::Block(block);
    } else {
        //println!("Found unexpected token");
        return Err(content.error("Expected literal, identifier or block"));
    }
    Ok(value)
}

type GenResult = (String, proc_macro2::TokenStream, proc_macro2::TokenStream, proc_macro2::TokenStream);

impl RmlNode {
    fn generate(&self) -> GenResult {
        // use _ident to get the node type
        let node_type = self._ident.to_string();

        let node_type = match node_type.as_str() {
            "Node" => ItemTypeEnum::Node,
            "Rectangle" => ItemTypeEnum::Rectangle,
            "Text" => ItemTypeEnum::Text,
            _ => panic!("Unknown node type: {}", node_type),
        };
        
        // use or generate id if not present
        let id = self
            .properties
            .iter()
            .find_map(|(k, v)| if k == "id" { Some(v.to_string()) } else { None })
            .unwrap_or_else(|| Uuid::new_v4().simple().to_string());

        // Generate a temporary variable for the node
        let temp_node = format_ident!("temp_node_{}", id);

        // generate code for each child
        let child_results: Vec<GenResult> = self
            .children
            .iter()
            .map(|child| child.generate())
            .collect();

        // get token stream parts
        let child_code: Vec<proc_macro2::TokenStream> = child_results
            .iter()
            .map(|(_, code, _, _)| code.clone())
            .collect();

        // get temporary variable names
        let child_temp_nodes: Vec<proc_macro2::TokenStream> = child_results
            .iter()
            .map(|(id, _, _, _)| {
                let child_temp_var = format_ident!("temp_node_{}", id);
                quote! { #child_temp_var }
            })
            .collect();
        
        let initializer_of_childs: Vec<proc_macro2::TokenStream> = child_results
            .iter()
            .map(|(_, _, _, initializer)| initializer.clone())
            .collect();

        // generate initializer functions
        let initializer: Vec<proc_macro2::TokenStream> = self
            .properties
            .iter()
            .map(|(k, v)| {
                let k_string = k.to_string();
                // callbacks
                if !k_string.starts_with("on_") && !k_string.ends_with("_changed") {
                    // test if the property is a block code or a value
                    let value = match v {
                        Value::Block(block) => {
                            quote! {
                                // create AbstractValue from the value
                                let value: AbstractValue = #block .into();
                                let node_name = engine.get_node(#temp_node).unwrap().id.clone();
                                engine.set_property_of_node(&node_name, stringify!(#k), value);
                            }
                        }
                        _ => { quote! {} }
                    };

                    value
                }
                else {
                    quote! {}
                }
            }).collect();

        let initializer_code = quote! {
            #(#initializer)*
            #(#initializer_of_childs)*
        };

        // generate code for each function
        let functions: Vec<proc_macro2::TokenStream> = self
            .functions
            .iter()
            .map(|f| {
                let f_name = f.sig.ident.clone();
                let f_inputs = f.sig.inputs.clone();
                let f_output = f.sig.output.clone();
                let f_body = inject_engine_in_block((*f.block).clone(), false);

                let res = match f_output {
                    syn::ReturnType::Default => {
                        quote! { fn #f_name(engine: &mut RmlEngine, #f_inputs) #f_body }
                    }
                    _ => {
                        quote! {
                            fn #f_name(engine: &mut RmlEngine, #f_inputs) #f_output
                            #f_body
                        }
                    }
                };
                //println!("Function name: {}", f_name);
                res
                
            })
            .collect();

        // let functions_name: Vec<String> = self.functions
        //     .iter()
        //     .map(|f| f.sig.ident.to_string())
        //     .collect();

        let functions_code = quote! {
            #(#functions)*
        };

        // convert properties in token stream
        let properties: Vec<proc_macro2::TokenStream> = self
            .properties
            .iter()
            .map(|(k, v)| {
                let k_string = k.to_string();
                // callbacks
                if k_string.starts_with("on_") && k_string.ends_with("_changed") {
                    let observed = k_string.trim_start_matches("on_").trim_end_matches("_changed");
                    if let Value::Block(block) = v {
                        // in block, if we see a call to a function, we need to add the engine as first argument to the function
                        quote! {
                            let cb_id = engine.add_callback( |engine| #block );
                            engine.bind_node_property_to_callback( #id, #observed, cb_id );
                        }
                    } else {
                        quote! {} // fallback ou erreur
                    }
                } 
                // normal prop
                else {
                    // test if the property is a block code or a value
                    let value = match v {
                        Value::Block(block) => {
                            // will be setted later with an initializer
                            quote! {
                                let prop_id = engine.add_property(Property::new( AbstractValue::Null ));
                                engine.add_property_to_node(#temp_node, stringify!(#k).to_string() , prop_id);
                            }
                        }
                        _ => {
                            let value = value_to_abstract_value(v);
                            quote! {
                                let prop_id = engine.add_property(Property::new( #value ));
                                engine.add_property_to_node(#temp_node, stringify!(#k).to_string() , prop_id);
                            }   
                        }
                    };

                    value
                }
            }).collect();

        // generate current node
        let node_code = quote! {
            let #temp_node = engine.add_node(
                #id.to_string(),
                #node_type,
                HashMap::new(),
            ).unwrap();

            #(#properties)*

            #(
                #child_code;
                engine.add_child(#temp_node, #child_temp_nodes);
            )*
        };

        (id, node_code, functions_code, initializer_code)
    }
}